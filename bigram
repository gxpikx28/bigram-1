{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fc67e47-d153-494b-bbf3-bbb131220c2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability of 'world' given 'hello' is 0.5000\n",
      "\n",
      "All bigram probabilities:\n",
      "P('world' | 'hello') = 0.5000\n",
      "P('universe' | 'hello') = 0.2500\n",
      "P('friend' | 'hello') = 0.2500\n",
      "P('hello' | 'world') = 1.0000\n",
      "P('hello' | 'universe') = 1.0000\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict, Counter\n",
    "\n",
    "def calculate_bigram_probabilities(text):\n",
    "    # Tokenize the text\n",
    "    tokens = text.split()\n",
    "    \n",
    "    # Create bigrams\n",
    "    bigrams = list(zip(tokens, tokens[1:]))\n",
    "    \n",
    "    # Count word and bigram frequencies\n",
    "    word_freq = Counter(tokens)\n",
    "    bigram_freq = Counter(bigrams)\n",
    "    \n",
    "    # Calculate bigram probabilities\n",
    "    bigram_probabilities = defaultdict(dict)\n",
    "    for (w1, w2), count in bigram_freq.items():\n",
    "        bigram_probabilities[w1][w2] = count / word_freq[w1]\n",
    "    \n",
    "    return bigram_probabilities\n",
    "\n",
    "def get_bigram_probability(bigram_probabilities, word1, word2):\n",
    "    return bigram_probabilities.get(word1, {}).get(word2, 0)\n",
    "\n",
    "# Example text\n",
    "text = \"hello world hello universe hello world hello friend\"\n",
    "\n",
    "# Calculate bigram probabilities\n",
    "bigram_probabilities = calculate_bigram_probabilities(text)\n",
    "\n",
    "# Example usage\n",
    "word1 = \"hello\"\n",
    "word2 = \"world\"\n",
    "probability = get_bigram_probability(bigram_probabilities, word1, word2)\n",
    "print(f\"The probability of '{word2}' given '{word1}' is {probability:.4f}\")\n",
    "\n",
    "# Print all bigram probabilities\n",
    "print(\"\\nAll bigram probabilities:\")\n",
    "for word1, next_words in bigram_probabilities.items():\n",
    "    for word2, prob in next_words.items():\n",
    "        print(f\"P('{word2}' | '{word1}') = {prob:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba62a495-771b-4a3b-abbe-c923eec490e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
